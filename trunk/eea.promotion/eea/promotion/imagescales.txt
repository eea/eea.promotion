# -*- coding: utf-8 -*-

=======================
Promo ImageLink Adapter
=======================

For listing promotions in the sidebars, a special imglink is used. It will
return None if the item does not have an image, i.e. the ImageView.display
returns False.

  >>> self.item.setTitle('Plain English Title')
  >>> self.item.setDescription('Plain English Description')
  >>> adapter = self.item.restrictedTraverse('@@promo_imglink')
  >>> adapter('thumb') == None
  True

  >>> self.item.setImage(self.img_file)
  >>> self.item.restrictedTraverse('@@imgview').display()
  True

Now promo_imglink returns the full imagelink:

  >>> from elementtree import ElementTree as ET
  >>> output = '<root>' + adapter('thumb') + '</root>'
  >>> xml = ET.XML(output)

It's built up of three separate anchors:

  >>> len(xml.findall('a'))
  3

The first one holds the title:

  >>> a = xml.findall('a')[0]
  >>> a.get('title')
  'Plain English Description'

  >>> a.text
  'Plain English Title'

  >>> a.get('class')
  'portletHeader'

  >>> a.get('href')
  'http://nohost/plone/test'

The second anchor is hidden and only used by the promotion javascript slider:

  >>> a = xml.findall('a')[1]
  >>> a.get('style')
  'display: none'

  >>> a.get('href')
  'http://nohost/plone/test/image_thumb'

The third anchor holds the actual image:

  >>> a = xml.findall('a')[2]
  >>> a.find('img').get('src')
  'http://nohost/plone/test/image_thumb'

  >>> a.get('title')
  'Plain English Description'


UTF-8 Encoding
--------------

What happends when the title and description contains unicode characters?

  >>> self.item.setTitle(u'Räksmörgås')
  >>> self.item.setDescription(u'Räksmörgås')

The imglink adapter should return a UTF-encoded string that the clients browser
then decodes:

  >>> adapter = self.item.restrictedTraverse('@@promo_imglink')
  >>> print adapter('thumb').decode('utf-8')
  <a ...>Räksmörgås...</a>


ImageLinks for Multimedia Items:
--------------------------------

For video items we get a slightly different promo_imglink: it appends
'thickbox' to the class names. This is because we want these items to open
in a thickbox pop-up.

  >>> adapter = self.vid.restrictedTraverse('@@promo_imglink')
  >>> output = '<root>' + adapter('thumb') + '</root>'
  >>> xml = ET.XML(output)

  >>> xml.findall('a')[0].get('class')
  'thickbox portletHeader'

  >>> xml.findall('a')[2].get('class')
  'thickbox'

